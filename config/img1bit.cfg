// Model for 1 bit image data

enum {N=12}; // N number of contexts
int r0,r1,r2,r3,r4,w,ly,cy,run,col;
int cxt[12]={};  // contexts
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int bufpos;
int m_s[6]={45, 68, 49, 68, 64, 33};
int m_e[6]={113, 3439, 90, 1805, 1643, 83};
int m_m[6]={18, 27, 4, 18, 25, 14};

int w1,w2,w3,w4,w8;

int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int min(int a, int b) {return a<b?a:b;}

int update(int y,int c0,int bpos,int c4) {
    int i;
    if (bpos== 0){ 
        buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
    }
    ly=cy;
    cy=y;
    if (cy!=ly || col==0){
        run=0;
    }else{
        run=min(0xFF,run+1);
    }
    // update the contexts (pixels surrounding the predicted one)
    r0=(r0<<1)|y;
    r1=(r1<<1)|((buf(w1)>>(7-bpos))&1);
    r2=(r2<<1)|((buf(w2)>>(7-bpos))&1);
    r3=(r3<<1)|((buf(w3)>>(7-bpos))&1);
    r4=(r4<<1)|((buf(w4)>>(7-bpos))&1);
    cxt[0]=0x100|(r0&0x7)+((r1>>4)&0x38)+((r2>>3)&0xc0);
    cxt[1]=0x200|((r0&1)|((r1>>4)&0x3e)|((r2>>2)&0x40)|((r3>>1)&0x80));
    cxt[2]=(0x300|((r0&0x3f)^(r1&0x3ffe)^((r2<<2)&0x7f00)^((r3<<5)&0xf800)))&0x3ff;
    cxt[3]=(0x400|((r0&0x3e)^(r1&0x0c0c)^(r2&0xc800))^run)&0x4ff;
    cxt[4]=0x100|(((r1&0x30)^(r3&0x0c0c))|(r0&3));
    cxt[5]=0x800|(((!r0)&0x444)|(r1&0xC0C)|(r2&0xAE3)|(r3&0x51C));
    cxt[6]=0xC00|((r0&1)|((r1>>4)&0x12)|((r2>>1)&0x60)|(r3&0xC0));
    cxt[7]=0x1000|(((r0>>4)&0x2AC)|(r1&0xA4)|(r2&0x349)|((!r3)&0x14D));
    cxt[8]=0x2000 |  ((r0&7)|((r1>>1)&0x3F8)|((r2<<5)&0xC00));//
    cxt[9]=0x10000|  ((r0&0x3f)^(r1&0x3ffe)^(r2<<2&0x7f00)^(r3<<5&0xf800));
    cxt[10]=0x20000|((r0&0x3e)^(r1&0x0c0c)^(r2&0xc800)^run);
    cxt[11]=0x40000|((r0&0xaa)^(r1&0x0c0c)^(r3&0xc800)^(r4&0xc0)^run);
    for (i=0;i<N;++i) 
    vmx(DS,0,cxt[i]);
    col++;
        if(col==w8){col=0; }
    vmx(MX,0,((r0&0x7)|((r1>>4)&0x38)|((r2>>3)&0xc0)) &0xff);
    vmx(MX,1,(((r1&0x30)^(r3&0x0c)^run)|(r0&3)) &0xff);
    vmx(MX,2,((r0&1)|((r1>>4)&0x3e)|((r2>>2)&0x40)|((r3>>1)&0x80)) &0xff);
    vmx(MX,3,((r0&0x3e)^((r1>>8)&0x0c)^((r2>>8)&0xc8)) &0xff);
    vmx(MX,4,c0);
    //vmx(MX,5,0);  //no need, defaults to 0
    return 0;
}

void block(int a,int b) { 
    w=a; //get block info, image width
    w1=w-1;w2=w+w1;w3=w+w2;w4=w+w3; w8=w*8;
}

int main() {
    int i;
    vmi(STA,0,40+(50<<16),5|(5<<16),15+(0<<16),0);
    vmi(DS,0,18+(1<<16),1023,N,0);        //pr[0]..pr[11] 
    for (i=0;i<N;i++)         vmi(MM,i,0,i,0,0);
    for (i=N;i<N*2;i++)       vmi(MM,i,3,i-N,0,0);

    vmi(ST,0,3,0,-1,0);           //pr[11]=0   //static prediction
    vmi(MX,0,m_s[0] +256*m_e[0]+0x1000000*m_m[0],256 ,0,0);
        vmi(MM,N*2,0,13,1,0);
    vmi(MX,1,m_s[1] +256*m_e[1]+0x1000000*m_m[1],256 ,0,0);
        vmi(MM,N*2+1,0,14,1,0);
    vmi(MX,2,m_s[2] +256*m_e[2]+0x1000000*m_m[2] ,256 ,0,0);
        vmi(MM,N*2+2,0,15,1,0);
    vmi(MX,3,m_s[3] +256*m_e[3]+0x1000000*m_m[3] ,256 ,0,0);
        vmi(MM,N*2+3,0,16,1,0);
    vmi(MX,4,m_s[4] +256*m_e[4]+0x1000000*m_m[4],256 ,0,0);
        vmi(MM,N*2+4,0,17,1,0);
    vmi(MX,5,m_s[5] +256*m_e[5]+0x1000000*m_m[5],1 ,1,0);
}