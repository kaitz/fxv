// Model for 4 bit image data

enum {DHSBIT=0x100};
int il[65536]={}; 
enum {S=14}; // N number of contexts
int cxt[14]={};
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int w,bufpos;
char WW, W, NWW, NW, N, NE, NEE, NNWW , NNW, NN, NNE, NNEE;
int col, line, run, prevColor, px;
int m_s[7]={30,26,8 ,34,82,63,8 };
int m_m[7]={19,29,26,21,25,32,30};
int max1,max3,max4;
int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int h2(int a, int b){
 return (a+512)*773+b;
 }
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;}

int update(int y,int c0,int bpos,int c4) {
    int i,j;
    if (bpos== 0){ 
        buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
    }
    if (bpos==0 || bpos==4){
        WW=W; NWW=NW; NW=N; N=NE; NE=NEE; NNWW=NWW; NNW=NN; NN=NNE; NNE=NNEE;
        if (bpos==0){
            W=c4&0xF; NEE=buf(w-1)>>4; NNEE=buf(w*2-1)>>4;
        }else{
            W=c0&0xF; NEE=buf(w-1)&0xF; NNEE=buf(w*2-1)&0xF;
        }
        if (W!=WW || col==0){
            prevColor=WW;
            run=0;
        }else{
            run=min(0xFFF,run+1);
        }
        px=1; //partial pixel (4 bits) with a leading "1"
        cxt[0]=(W<<8)+(NW<<4)+N;
        cxt[1]=N+ min(0xFFF, col>>3)*16;
        cxt[2]=((W+NW*16)*16+N)*256+(NN+NE*16);
        cxt[3]=h2(h2(W, N),h2( NE+NNE*16, NEE+NNEE*16));
        cxt[4]=h2(h2(W, N), h2(NW+NNW*16, NWW+NNWW*16));
        cxt[5]=h2(h2(W, il[(run+1)]), h2(prevColor, col/max1 ));
        cxt[6]=NE+ 16*min(0x3FF, (col+line)/max3);
        cxt[7]=NW+ 16*((col-line)/max3);
        cxt[8]=(((WW<<4)+W)*256+NN*16+N)*256+ (NNWW<<4)+NW;
        cxt[9]=N+(NN<<4);
        cxt[10]=W+(WW<<4);
        cxt[11]=W+(NE<<4);
        cxt[12]=WW+(NN<<4)+(NEE<<8);
        cxt[13]=N;
        
        col++;
        if(col==w*2){col=0; line++;}
        for ( i=0; i<S; i++) {
            vmx(DHS,0,cxt[i]);
        }
    }else{
        px=(px+px)+y;
        j=(y+1)<<(bpos&3)-1;
        for (i=0; i<S; ++i) vmx(DHS+DHSBIT,0,j);
    }
    vmx(MX,0,(W<<4) | px);
    vmx(MX,1,min(31,col/max4) | (N<<5));
    vmx(MX,2,(bpos&3) | (W<<2) | (min(7,il[(run+1)])<<6));
    vmx(MX,3,W | (NE<<4) | ((bpos&3)<<8)); 
    vmx(MX,4,px);
    //vmx(MX,5,0);
    vmx(SMC,0,px);
    //vmx(APM2,0,(((NE<<4)+N)<<4)+px);
    return 0;
}

void block(int a,int b) { 
    w=a; //get block info, image width
    max1=max(1,w>>1),max3=max(1,w<<3),max4=max(1,w>>4);
}

int main() { 
    int x,i;
    vmi(ST,0,144,0,0,0);          // output prediction to input[0]
    vmi(DHS,0,4,24 ,0,14);
    vmi(SMC,0,0x100,1023,0,0);
    vmi(MX,0,m_s[0] +256*0+0x1000000*m_m[0],256 ,0,0);
    vmi(MX,1,m_s[1] +256*0+0x1000000*m_m[1],512 ,0,0);
    vmi(MX,2,m_s[2] +256*0+0x1000000*m_m[2],512 ,0,0);
    vmi(MX,3,m_s[3] +256*0+0x1000000*m_m[3],1024 ,0,0);
    vmi(MX,4,m_s[4] +256*0+0x1000000*m_m[4],16 ,0,0);
    vmi(MX,5,m_s[5] +256*0+0x1000000*m_m[5],1 ,0,0);
    for (i=0;i<6;i++) vmi(MM,i,0,i,1,0);
    vmi(MX,6,m_s[6] +256*47+0x1000000*m_m[6],1 ,1,0);
    //vmi(APM2,0,0x10000,24+6*256,6,0);
    // calc log table
    x=14155776;
    for (i=2; i<65536; ++i) {
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    }
}
