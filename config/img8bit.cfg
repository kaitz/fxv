// Model for 8 bit image data

int pW,pN,pNW,pNE,pWW,pNN,pNNE,pNWW,pNNW,pNWWW,pNNWW,pNWNW,pGw,pGn,pDh,pDv,pWWW,pWWWW;
int pGv,pGh,HBB1,HBB2,pwn;
int w,col;
int itype;
int id8=1,id9=1;
int ml,ml1,blpos,c1,bufpos;
// X is predicted pixel
// NNWWW NNWW NNW NN NNE
//  NWWW  NWW  NW  N  NE
//   WWW   WW   W  X 
il[65536]={};
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int m_s[7]={65, 63, 65, 67, 63, 65, 4};

int apmfails;
int e_l[8]={1114,1023, 969,1023, 966,1023,1020,1023};//low
int e_h[8]={2889,3069,3073,2815,3073,3073,3020,3277};

int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int sqrbuf(int i) {
    return buf(i)*buf(i);
} 
int h2(int a, int b){
    return (a+512)*773+b;
}
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;}
int abs(int x){
    if (x>=0) return x;
    else return (0-x);
}

int update(int y,int c0,int bpos,int c4) {
    int i,logvar,var,mean, cw;
    int errr,errrp;
    int pNW2,pN2,pW2,pN1,pW1;
    apmfails=apmfails<<1;
    i=vmx(ERR,bpos,0);
    apmfails=apmfails|i;
    if (bpos==0){ 
        buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
        c1= buf(1);
        cw= buf(w);
        pWWW= buf(3);
        pWWWW= buf(4);
        pW= buf(1);
        pN=buf(w-1);
        pNW=buf(w);
        pNE=buf(w-2);
        pWW=buf(2);
        pNN=buf(w*2-1);
        pNNE=buf(w*2-2);
        pNWW=buf(w+1);
        pNNW=buf(w*3);
        pNWWW=buf(w*2+2);
        pNNWW=buf(w*2+1);
        pNWNW=pN+pW-pNW;
        pGw=2*pN-pNN;
        pGn=2*pW-pWW;
        pDh=(abs(pW-pWW)+abs(pN-pNW)+abs(pN-pNE));
        pDv=(abs(pW-pNW)+abs(pN-pNN)+abs(pNE-pNNE));
        pNW2=pNW>>2;
        pN2=pN>>2;
        pW2=pW>>2;
        pN1=pN>>1;
        pW1=pW>>1;

        pGv =(abs(pNW-pW)+ abs(pNN-pN));
        pGh= (abs(pWW-pW)+ abs(pNW-pN));
        HBB1= pW+pN-pNW;
        HBB2= (pNW+pW)>>1;
        mean=pW+pN+pNW+pNWW;
        var=(sqrbuf(1)+sqrbuf(w-1)+sqrbuf(w)+sqrbuf(w+1)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=il[var];
        i=0;
        blpos++;
        errr=(pWW +pNWW -pNW );
        errrp=abs(errr-pNWNW );
        if(errrp>255)id8++; 
        else id9++;
        //if ( blpos==0) id8=id9=1,itype=0;    // reset on new block
        if( (blpos%w)==0 &&  blpos>w) itype=(id9/id8)<4; // select model

        if (itype==0){ //faster, for smooth images
            vmx(CM, 0,pW );
            vmx(CM, 0,pN );
            vmx(CM, 0,pNE );
            vmx(CM, 0,pWW );
            vmx(CM, 0,pNN );
            vmx(CM, 0,pNWNW*256+pW);
            vmx(CM, 0,pNWW );
            vmx(CM, 0,pNNE );
            vmx(CM, 0,HBB1);
            vmx(CM, 0,HBB2);
            vmx(CM, 0,pGw*256+ pW);

            vmx(CM, 0,pGn*256+ pW);
            vmx(CM, 0,pDh*256+ pW);
            vmx(CM, 0,pDv*256+ pW);
            vmx(CM, 0,pGv*256+ pW);
            vmx(CM, 0,pGh*256+ pW);
            vmx(CM, 0,pGv*256+ pN);
            vmx(CM, 0,pGh*256+ pN);
            vmx(CM, 0,errrp*256+ pW);
            
            //vmx(CM, 0,h2(mean,logvar));
            vmx(CM, 0,h2(pGn ,pGw));
            vmx(CM, 0,h2(pDh , pDv));
            vmx(CM, 0,h2(pGv, pGh));

            //vmx(CM, 0,abs(min(pW,min( pN, pNW)) + max(pW,max(pN,pNW)) -pNW));

            vmx(CM, 0,h2(pW2, pNW2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, buf(w*2)>>2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, pNWW>>2));
            vmx(CM, 0,h2(pNWW>>2, buf(w+2)>>2));
            vmx(CM, 0,h2(++i, (pNWW+pNNE)>>1));
            vmx(CM, 0,h2(++i, (pN+pNNE)>>1));

            vmx(CM, 0,pGw*256+pN);

            vmx(CM, 0,pGn*256+pN);
            vmx(CM, 0,(pNN*256 +pNE)*256+pW);
            vmx(CM, 0,h2(++i, (pW+pNW)>>1));
            vmx(CM, 0,h2(++i, (pW+pN)>>1));
            vmx(CM, 0,h2(++i, (pNW+buf(w*2))>>1));
            vmx(CM, 0,h2(++i, (pW+pN)>>1));
            vmx(CM, 0,h2(++i, (pNW+pNWW)>>1));
            vmx(CM, 0,h2(++i, (pNWW+buf(w+2))>>1));
            vmx(CM, 0,h2(++i, (pNWW+pNNE)>>1));
            ////vmx(CM, 0,h2(++i, (pN+pNNE)>>1));
            vmx(CM, 0,h2(h2(pNNE ,pN ),pW ));
            vmx(CM, 0,h2(h2(pNWW ,pN) ,h2(pNE ,pW)));
            vmx(CM, 0,h2(h2(pGn ,pNE) ,pNNE ));
            vmx(CM, 0,h2(h2(pWW ,pNWW ),h2(pNW ,pN)));
            vmx(CM, 0,h2(h2(pNNW , pNW) ,pW ));
            vmx(CM, 0,h2(h2(pNW2, pWWW>>2), pN2));
            vmx(CM, 0,h2(h2(pWWW>>2, pNE>>2), pNNE>>2));
            
            vmx(CM, 0,h2(h2(pNW2, pW2), pN2));
            vmx(CM, 0,h2(h2(pN2, pNW2), pNWW>>2));
            vmx(CM, 0,h2(h2(pW2, pN2), pNN>>2));
        } else {// 2 x
            i=512;
            vmx(CM, 0,pW);
            vmx(CM, 0,pN);
            vmx(CM, 0,pNW);
            vmx(CM, 0,pNWW);
            vmx(CM, 0,pN);
            vmx(CM, 0,HBB1);
            vmx(CM, 0,HBB2);
            vmx(CM, 0,h2(pGv,pW));
            vmx(CM, 0,h2(pGh,pW));
            vmx(CM, 0,h2(pGv,pN));
            vmx(CM, 0,h2(pGh,pN));
            vmx(CM, 0,h2(pGv, pGh));
            //vmx(CM, 0,h2(abs(min(pW,min( pN, pNW)) + max(pW,max(pN,pNW)) -pNW),0));
            vmx(CM, 0,pN+pNW-pNWW);
            vmx(CM, 0,pNW+(pN-pNWW)>>1);
            vmx(CM, 0,(pN+pNWW)>>1);
            vmx(CM, 0,h2((pN-pNW), pW1));
            vmx(CM, 0,h2((pNW-pNWW), pW1));
            vmx(CM, 0,h2((pNWW+pN), pW1));

            vmx(CM, 0,h2(pW2, pNW2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, buf(w*2)>>2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, pNWW>>2));
            vmx(CM, 0,h2(pNWW>>2, buf(w+2)>>2));
            vmx(CM, 0,h2(pNWW>>2, pNNE>>2));
            vmx(CM, 0,h2(pN2, pNNE>>2));
            vmx(CM, 0,h2(++i, pW+pNW>>1));
            vmx(CM, 0,h2(++i, pW+pN1));
            vmx(CM, 0,h2(++i, pNW+buf(w*2)>>1));
            vmx(CM, 0,h2(++i, pW+pN1));
            vmx(CM, 0,h2(++i, pNW+pNWW>>1));
            vmx(CM, 0,h2(++i, pNWW+buf(w+2)>>1));
            vmx(CM, 0,h2(++i, pNWW+pNNE>>1));
            vmx(CM, 0,h2(++i, pN+pNNE>>1));
            // 3 x
            vmx(CM, 0,h2(h2(pNW2, pW2), pN2));
            vmx(CM, 0,h2(h2(pN2, pNW2), pNWW>>2));
            vmx(CM, 0,h2(h2(pW2, pN2), pNN>>2));
            // mixed
            vmx(CM, 0,h2(h2(pWWW+pNW>>1, pW2), pN2));
            vmx(CM, 0,h2(h2(pN+pW1,pNW+buf(w*2)>>1),pN2));
            vmx(CM, 0,h2(pN+pW2,pN+pNW2));
            vmx(CM, 0,h2(pN+pW1,pNW+buf(w*2)>>1));
            vmx(CM, 0,h2(pN+pW1,pN+pNNE>>1));
            vmx(CM, 0,h2(pN+pW1,pNWW+pNNE>>1));
            vmx(CM, 0,h2(pNW+buf(w*2)>>1,pN+pNNE>>1));
            vmx(CM, 0,h2(pN+pNW>>1,pNW+pNWW>>1));
            vmx(CM, 0,h2(pW+pN1,pNW+buf(w*2)>>1));
            vmx(CM, 0,h2(pW+pN2,pNW+pNWW>>2));
            vmx(CM, 0,h2(++i, (pW-pN1)+pNW2));
            vmx(CM, 0,h2(++i, (pN-pNW>>1)+pW2));

            vmx(CM, 0,h2(++i, (pN+pNW2-pW)));
            
            vmx(CM, 0,h2(++i,(pW*2-pN)>>1));
            //vmx(CM, 0,h2(mean,logvar));
            vmx(CM, 0,h2(++i,(pNW*2-buf(w*2))>>1));
            vmx(CM, 0,h2(++i,(pW+pNW-pNWW)>>1));
            
            vmx(CM, 0,h2((pWWWW+pWWW)>>2,(pN+pNW)>>2));
            vmx(CM, 0,h2((pWWWW+pWWW)>>1,(pNW+buf(w*2))>>1));
            vmx(CM, 0,h2((pWWWW+pWWW)>>1,(pN+pNNE)>>1));
            vmx(CM, 0,h2((pWWWW+pWWW)>>1,(pNWW+pNNE)>>1));
            vmx(CM, 0,h2((pWWWW+pW)>>2,(buf(w-3)+pNW)>>2));
            vmx(CM, 0,h2((pWWWW+pW)>>1,(pNW+buf(w*2))>>1));
            vmx(CM, 0,h2((pWWWW+pW)>>1,(buf(w-3)+buf(w*2-3))>>1));
            vmx(CM, 0,h2((pWWWW+pW)>>1,(buf(w+3)+buf(w*2+3))>>1));
            vmx(CM, 0,h2(h2(pNW2, pWWW>>2), pN2));
            vmx(CM, 0,h2(h2(pWWW>>2, pNE>>2), pNNE>>2));
        }
        vmx(SCM,0,(pW+pNW)>>1);
        vmx(SCM,1,(pW+pNW-pNWW)>>1);
        vmx(SCM,2,(pW*2-pN)>>1);
        vmx(SCM,3,(pNW*2-buf(w*2))>>1);
        vmx(SCM,4,(pW+pNW-pN)>>1);
        ml1=((errrp>255)<<10);
        ml=(mean>>1)|((logvar<<1)&0x180);
        vmx(SCM,5,ml);
        pwn=(pNW+pW)>>4;
    }
    if (++col>=8) col=0;
    vmx(MX,0,2);
    vmx(MX,1,col);
    vmx(MX,2,pwn);
    vmx(MX,3,c0);
    vmx(MX,4,ml);
    vmx(MX,5,pDv |ml1);
    //vmx(MX,6, 0);
    vmx(SMC,0,c0);
    vmx(SMC,1,c0|(c1<<8));
    vmx(APM1,0,(c0<<8)|(apmfails&0xfF));
    vmx(APM1,1,h2(c0,pW*256+pN));
    vmx(APM1,2,c0+256*c1);
    return 0;
}
//VM calls this after every image block
void block(int a,int b) {
    w=a; //get block info, image width
    blpos=itype=0;
    id8=id9=1;
}
// main is called only once after VM init.
int main() { 
    int x,i;
    for (i=0;i<8;i++)  vmi(ERR,i,e_l[i]+(e_h[i]<<16),0,0,0);
    vmi(ST,0,144,0,0,0);
    vmi(CM,0,16*4096,65-2,0,0); 
    vmi(SMC,0,0x100,1023,0,0);
    vmi(SMC,1,0x10000,1023,0,0);
    vmi(SCM,0,16,0,0,0);
    vmi(SCM,1,16,0,0,0);
    vmi(SCM,2,16,0,0,0);
    vmi(SCM,3,16,0,0,0);
    vmi(SCM,4,16,0,0,0);
    vmi(SCM,5,16,0,0,0);
    vmi(MX,0,m_s[0],8,0,0);
    vmi(MX,1,m_s[1],8,0,0);
    vmi(MX,2,m_s[2],32,0,0);
    vmi(MX,3,m_s[3],256,0,0);
    vmi(MX,4,m_s[4],512,0,0);
    vmi(MX,5,m_s[5],2048,0,0);
    vmi(MM,0,0,0,1,0);
    vmi(MM,1,0,1,1,0);
    vmi(MM,2,0,2,1,0);
    vmi(MM,3,0,3,1,0);
    vmi(MM,4,0,4,1,0);
    vmi(MM,5,0,5,1,0);
    vmi(MX,6,m_s[6] ,1 ,1,0); 
    vmi(APM1,0,0x10000,7,6,0); //7
    vmi(APM1,1,0x10000,7,7,0);//8
    vmi(APM1,2,0x10000,7,7,0);//9
    vmi(AVG,0,1|(1<<8),0,8+9*256,0); 

    x=14155776;
    for (i=2; i<65536; ++i){
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    } 
}
