// Model for dictionary processed text
enum {COLON='J', SEMICOLON='K', LESSTHAN='L', EQUALS='M', GREATERTHAN='N', QUESTION='O', FIRSTUPPER=64, SQUAREOPEN=91};
enum {BACKSLASH=92, SQUARECLOSE=93, CURLYOPEN='P', VERTICALBAR='Q', CURLYCLOSE='R', APOSTROPHE=39, QUOTATION=34};
enum {TEXTDATA=96, HTLINK=31, LF=10, ESCAPE=12, SPACE=32};
enum {SKIPCM=256};

int t[14]={};
int info;
int c1,c2,c3,c8,word0,word1,word2,word3,apmfails,wshift,w4,nl1,nl,col,fc,fc1,x4,brcxt1,f,lastfc,eword,dcwl;
char words,spaces;
int number0;
int oStatew4,w4r,nStatew4=0xffffffff;
// Table context
// Start End Linefeed
int startendchars[6]={
    0x505051,0xffffff,  // {{|
    0x515252,0xffffff,  // |}}
    0x512d,0xffff       // |-
};
//Delimiter(s)
int celld[4]={0x5151,0xffff,0x0a5100,0xffff00}; //|- \10|
table startendchars celld tblcxt;

char wrt_w[256]={
    2, 3, 1, 3, 3, 0, 1, 2, 3, 3, 0, 0, 1, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3,
    3, 2, 0, 2, 1, 3, 2, 1, 3, 3, 3, 3, 2, 3, 0, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 3, 2, 2,
    2, 2, 0, 0, 2, 3, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 3,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

char wrt_t[256]={
    0, 0, 2, 0, 5, 6, 0, 6, 0, 2, 0, 4, 3, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    2, 4, 1, 4, 4, 7, 4, 7, 3, 7, 2, 2, 3, 5, 3, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 5, 3, 3, 5, 5,
    0, 5, 5, 7, 5, 0, 1, 5, 4, 5, 0, 0, 6, 0, 7, 1,
    3, 3, 7, 4, 5, 5, 7, 0, 2, 2, 5, 4, 4, 7, 4, 6,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
};

char fcq[128]={
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 2, 0, 0, 0, 0, 3, 1, 0, 3, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0,
    4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

char fcqval[12]={2,3,1,3,7,0,7,0,4,6,5,2}; // +fc
//" ' ( * @ J L M P Q [ `
char fcqidx[12]={ 34, 39, 40, 42, 64, 74, 76,77,80,81,SQUAREOPEN, TEXTDATA};

char br[8]={'(',')', CURLYOPEN,CURLYCLOSE, '[',']', LESSTHAN,GREATERTHAN};
char quotes[2]={QUOTATION,QUOTATION};
char fchar[20]={FIRSTUPPER,LF, TEXTDATA,LF, COLON,LF, LESSTHAN,GREATERTHAN,EQUALS,LF,SQUAREOPEN,SQUARECLOSE,
    CURLYOPEN,CURLYCLOSE,'*',LF,VERTICALBAR,LF,HTLINK,LF};
char fcskip[10]={};
//                {0,1,2,3,4,5,6,7,8,9};
int fcskipidx[10]={0,0,0,0,0,0,0,0,0,0};
distance false br brcxt;
distance true quotes qocxt;
distance false fchar fccxt;
column 31 96 10 colcxt; // collen, TEXTDATA, nl

int t1[256]={};
int t2[0x10000]={};
int wp[0x10000]={}; 
int primes[14]={ 0, 257,251,241,239,233,229,227,223,211,199,197,193,191 };
// Parameters
int m_e[8]={256,256,256,256,256,256,256,0}; // mixer error
int m_s[8]={127, 75, 30, 31, 53, 79, 96, 6};// mixer shift
int m_m[8]={ 14,28,38,34,23,24,30,4};// mixer error mul

int c_r[27]= { 3,  4,  6,  4,  6,  6,  2,  3,  3,  3,  6,  4,  3,  4,  5,  6,  2,  6};  // contextmap run mul
int c_s[27]= {48, 16, 28, 31, 36, 31, 33, 33, 35, 35, 25, 32, 33, 34, 30, 36, 31, 32, 32, 32, 32, 27, 39, 32, 29, 32, 32};
int c_s2[27]={12, 17, 12, 12, 12, 12, 12, 12,  8, 12, 17, 12, 12, 12, 12, 12, 12,  8, 12, 12, 12, 12, 12, 12,  4, 12, 12};
int c_s3[27]={43, 33, 34, 28, 46,  9, 32, 33, 37, 35, 33, 28, 31, 49, 28, 13, 33, 34, 50, 48, 40, 32, 32, 44, 32, 42, 32};
int c_s4[27]={ 9,  8,  9, 39,  8, 12, 15,  8,  8, 12, 10,  7,  7,  8, 12, 13, 13, 14,  5, 12, 12, 13, 12, 12, 12, 12, 12};

int uasfails,uaslimit;
int e_l[8]={1830, 1997, 1973, 1851, 1897, 1690, 1998, 1842};
int e_h[8]={4024, 4060, 3962, 3981, 4027, 4070, 3996, 4082};

int oState, wtype,ttype;
int nState=-1;

int MAXLEN=62; // longest allowed match + 1
int tm[0x100000]={};    // hash table of pointers to contexts
int h;      // hash of last 7 bytes
int ptr;    // points to next byte of match if any
int len;    // length of match, or 0 if no match
int match,ord;
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int  pos,w4br;

int buf(int i) {
    return buffer[(pos-i)&BMASK];
}
int bufr(int i){
    return buffer[i&BMASK];
}
int min(int a, int b) {return a<b?a:b;}

int matchMod(int y,int bpos) {
    int cx;
    if (bpos==0){
        //update match
        h=(h*887*8+c1+1)&0xfffff;  // update context hash
        if (len>3) len=len+(len<MAXLEN), ++ptr;
        else {  // find match
            len=1;
            ptr=tm[h];
            if (ptr && (pos-ptr)<0x400000)
            while (buf(len+1)==bufr(ptr-len-1) && len<MAXLEN) ++len;
        }
        tm[h]=pos;  // update hash table
        //if (len>3 ) printf("pos=%d len=%d ptr=%d\n", pos, len, ptr);
    }
    // predict match
    cx=0;
    if (len && c1==bufr(ptr-1)) {
        match=(bufr(ptr)>>(7-bpos))&1;
        if (len<16) cx=len*2+match;
        else cx=(len>>2)*2+match+24;
        cx=cx*256+buf(1);
    } else {
        len=0;
    }
    vmx(SMC,0,cx);
    return len;
}

int byteupdate(int c4) {
    int i,j,h1,c,d,d4,skip12;
    int above, brcontext,fccontext;
    wshift=0;
    c8 = (c8 << 8) + (c4 >> 24);
    c3=c2;
    c2=c1;
    c1=c4&0xff;
    i=wrt_w[c1];
    nStatew4=i;
    w4=w4*4+i;
    
    buffer[pos&BMASK]=c1;
    pos++;
    if (c1<'a') brcxt=brcxt+ c1;
    brcontext=brcxt;
    brcxt1=(brcontext>>8);
    qocxt=qocxt+c1;
    if (qocxt)
    vmx(CM, 25,(qocxt<<8)+c1);
    else
    vmx(CM, 25,(brcontext<<8)+c1);
    colcxt=colcxt+c1;
    w4br=0;
    tblcxt=tblcxt+c4;
    if(brcontext)w4br=fcq[brcontext>>8];
    if(brcontext==0 &&qocxt)w4br=fcq[qocxt>>8];

    if (c1=='M' || c1=='%' || c1=='[' ||c1==','||c1==APOSTROPHE) {
        if ( c1!=c2  )
        for (i=13; i>0; --i)
        t[i]=t[i-1]*primes[i];
        x4 =   (x4 << 8)+c2;
    }
    x4 =   (x4 << 8)+c1;
    for (i=13; i>0; --i)
    t[i]=t[i-1]*primes[i]+c1+i*256;
    for (i=3; i<6; ++i)
    vmx(CM, 0,t[i]);
    vmx(CM, 1,t[6]);
    vmx(CM, 2,t[8]);
    vmx(CM, 3,t[13]);
    j=c1;
    nState=wrt_t[c1];
    words= words<<1;
    spaces= spaces<<1;

    if (j>='a' && j<='z' || (c1>127 && c2!=ESCAPE)) {
        words=words|1;
        word0=word0*2104+j; //263*8
    } else {
        if (word0){
            word3=word2*47;
            word2=word1*53;
            word1=word0*83;
        }
        wp[word0&0xffff]=pos;
        word0=0;
        if (c1==32) spaces++;
        else if (c1==LF ) {
            fc=fc1=0;
            nl1=nl;
            nl=pos-1;
            wtype=(wtype<<3);
            w4=w4|0x3fc;
            words=0xfc;
        }
        else if (c1=='.' || c1==')' || c1=='O') {
            wtype= wtype&0xffffffc0;
            ttype= ttype&0xfffffff8;
            words = words | 0xfe;
            w4=w4|204;
            
        } 
        else if (c1==',' ) {
            words = words | 0xfc;
        }
        else if (c1=='J') {
            ttype= (ttype&0xfffffff8)+4;
            w4=w4|12;//      1100
        }   
        else if (c1=='R' || c1=='P') {
            words = words | 0xfc;
            wtype= wtype&0xffffffc0;
            ttype= (ttype&0xfffffff8)+3;
        }   
        else if (c1=='L' || c2=='&') {
            words = words | 0xfc;
        }   
        else if (c1=='M'  ) {
            ttype= (ttype&0xfffffff8)+4;
        }
        if (c1=='!' && c2=='&' ) {// '&nbsp;' to '&!'  to ' '
            w4=(w4&0xfffffffc)+wrt_w[' '];
            ttype= (ttype&0xfffffff8)+wrt_t[' '];
        }

        if (c1=='.') wshift=1;
    }
    if (oStatew4!=nStatew4) {
        w4r=(w4r<<2)+nStatew4;
        oStatew4=nStatew4;
    }
    // switch state if its new
    if (oState!=nState){
        wtype=(wtype<<3)+nState;
        oState=nState;
    }
    ttype=(ttype<<3)+nState;
    col=(colcxt>>8)&0xff;
    if ((colcxt>>24)) {
        // Reset contexts when there are two empty lines
        if((pos-nl1)<4) {
            fccxt=0;
            brcxt=0;
            qocxt=0;//tblcxt=0;
        }
        fc=colcxt&0xff;
        if(fc==GREATERTHAN) fccxt=0;
        if (fc=='@') fc1=1;
        else fc1=0;
        // Set new first char
        fccxt=fccxt+fc;
        fccontext =fccxt>>8;
    }
    if (col>2 && c1>FIRSTUPPER) {
        fccontext =fccxt>>8;
        // Before updating first char context look
        if ( (fccontext==EQUALS || fccontext==VERTICALBAR || fccontext==COLON|| fccontext==FIRSTUPPER|| fccontext==CURLYOPEN) && ( c1==CURLYCLOSE)) {
            while (fccontext==EQUALS || fccontext==VERTICALBAR || fccontext==COLON|| fccontext==FIRSTUPPER) fccxt=fccxt+(LF),fccontext =fccxt>>8;
            fccxt=fccxt+(c1);
        }
        // if link or template ended and remove any vertical bars |.  [xx|xx] {xx|xx}
        if ((fccxt>>8)==VERTICALBAR && (c1==SQUARECLOSE || c1==CURLYCLOSE)) {
            while( (fccxt>>8)==VERTICALBAR) fccxt=fccxt+(LF);
        }
        // if html link ends with space or ]
        if (((fccxt>>8)==COLON || (fccxt>>8)==HTLINK ) && (c1==SQUARECLOSE)) {
            while( (fccxt>>8)==COLON || (fccxt>>8)==HTLINK) fccxt=fccxt+LF;
        }
        if ( c1<128 )
        fccxt=fccxt+c1;
    }
    // switch from possible category link to http link
    if ((fccxt>>8)==COLON && c2=='/' && c1=='/') fccxt=fccxt+LF,fccxt=fccxt+HTLINK;
    above=(colcxt>>16)&0xff;
    lastfc=colcxt&0xff;
    if (lastfc=='[' && c1==32 && fc1==0) {
        if(c2==']' || c3==']' ) {
            fc=64;
            fc1=0;
            fccxt=0;
            fccxt=fccxt+fc;
        }
    }
    if (fc==' ' && c1!=' ') {
        fc=min(c1,TEXTDATA);
        if (fc=='@') fc1=1;
        else fc1=0;
        // Set new first char, we keep space from previous update
        fccxt=fccxt+fc;
    }
    fccontext=fccxt>>8;
    
    if(w4br==0 &&fccxt)w4br=fcq[fccontext];

    vmx(CM, 26,(fccxt&0xff00)+c1+(w4&12)*256+((brcxt1)<<24));
    if (fc=='*' && c1!=' ')  fc=min(c1,TEXTDATA);

    h1=word0*271+c1;
    
    if (c1==ESCAPE) vmx(CM, 4,0); else vmx(CM, 4,word0);

    if (c1==ESCAPE) vmx(CM, 4,0); else vmx(CM, 4,h1+word1);
    vmx(CM, 5,h1+ word2*71 );

    vmx(CM, 6,((ttype&0x3f)<<16)+(c4&0xffff));

    vmx(CM, 8,(c4 & 0xffffff) + ((w4 << 18) & 0xff000000));
    vmx(CM, 8,(wtype&0x3fffffff)*4+(w4&3));
    vmx(CM, 8,(fccontext*4) + ((wtype & 0x3ffff) << 9 )+w4br );
    
    vmx(CM, 9,lastfc | (fccontext << 15) | ((ttype & 63) << 7)|(brcxt1 << 24) );
    vmx(CM, 9,(lastfc | ((c4 & 0xffffff) << 8)));
    
    vmx(CM, 10, (w4 & 3)+word0*11 ); 
    vmx(CM, 10, c4 & 0xffff );
    vmx(CM, 10, ((fc << 11) | c1)+((w4 & 3)<< 18));
    
    vmx(CM, 11, (w4 & 15)+((ttype & 7) << 6 ) );
    vmx(CM, 11,c1 | ((col * (c1 == 32)) << 8)+((w4 & 15) << 16));
    vmx(CM, 11, fc<< 11);
    if (c1==ESCAPE)vmx(CM, 11,0); else vmx(CM, 11, (91 * word1 + 89 * word0));
    
    vmx(CM, 12, (c1 + ((ttype & 0x38) << 6)));
    vmx(CM, 12, c1+word0);
    vmx(CM, 12, ((c4 & 0xffff) << 16) | (fccontext  << 8) |fc) ;
    vmx(CM, 12,  ((wtype & 0xfff)<< 8)+((w4 & 0xfc))) ;

    vmx(CM, 13, above | ((ttype & 0x3f) << 9) | (col << 19)| ((w4 & 3) << 16) );
    vmx(CM, 13, h1+word1);
    vmx(CM, 13, above | (c1 << 16)| ((col+w4br) << 8));
    i=tblcxt;

    vmx(CM, 13, bufr(i)|( ( c1) << 8));
    vmx(CM, 13, word0+wrt_w[bufr(i)] );
    vmx(CM, 13,wrt_w[bufr(i)]|( ( fccontext) << 8) | ((w4br ) << 16));

    vmx(CM, 14, (x4 & 0xff00ff)  );
    vmx(CM, 14, (x4 & 0xff0000ff) | ((ttype & 0xE07) << 8) );
    
    f=(c4>>8)&0xffff;
    t2[f]=(t2[f]<<8)|c1; 
    f=c4&0xffff;
    f=f|(t2[f]<<16);
    d=(c4>>8)&0xff;
    t1[d]=(t1[d]<<8)|c1;
    d=c1|(t1[c1]<<8);
    d4=c=d;

    t1[brcxt1]=(t1[brcxt1]<<2)|(w4&3); // this is wierd, also end is bad
    d4=(ttype&7)|(t1[brcxt1]<<3);
    vmx(CM, 7,d4);
    
    vmx(CM, 14, (d4& 0xffff) | ((ttype & 0x38) << 16) );
    vmx(CM, 13, (f& 0xffffff));
    vmx(CM, 18,d );//2,5k
    vmx(CM, 18,((d& 0xffff00)>>4) | ((w4 & 0xf) )| ((ttype & 0xfff) << 20) );

    vmx(CM, 15, (c1 << 8) | (d >> 2)| (fc << 16));
    vmx(CM, 15, (c4 & 0xffff)+(c2==c3?1:0));
    vmx(CM, 16, (ttype & 0x3ffff) | ((w4 & 255) << 24));
    vmx(CM, 16, x4 );

    vmx(CM, 17, 257 * word1 + fccontext +193 * (ttype & 0x7fff) );
    vmx(CM, 17, fc|((w4r  & 0xfff) << 9)| ((c1  ) << 24) );
    vmx(CM, 17,(x4 & 0xffff00)| fccontext );

    vmx(CM, 18,(x4 >>16) | ((w4 & 255) << 24));
    if (c1>127) vmx(CM, 18,( ((w4 & 12)*256)+c1 << 11) | ((f & 0xffffff)>>16) );
    else vmx(CM, 18,(c1 << 11) | ((f & 0xffffff)>>16) );
    
    vmx(CM, 18,fccontext*4+w4br | ((c4 & 0xffff)<< 9)| ((w4 & 0xff) << 24) );
    vmx(CM, 18,   ((f >> 16) )| ((w4 & 0x3c)<< 25 )| (((ttype & 0x1ff))<< 16 ) );

    vmx(CM, 19, words+(spaces<< 8)+((w4&15)<< 16)+(((wtype>>6)&511)<< 21)+(fc1<<30));

    vmx(CM, 19,  c1 + ((32 * ttype) & 0x1fffff00));
    vmx(CM, 19,ttype*8+w4br);
    vmx(CM, 19, ((d& 0xffff)>>8) + ((64 * w4r) & 0x3ffff00)+(brcxt1<< 25));

    d=pos-wp[word0&0xffff];
    if (d > 255) {
        d = 255+(c1 << 16);
    } else {
        d=(d)+(buf(d)<< 8)+(c1 << 16);
    }
    vmx(CM, 19, (d )| (fc << 24));
    vmx(CM, 20,  (x4&0xf0f00000)+((x4&0x0000f0f0) << 12) );
    vmx(CM, 20,  word1*1471-word0*53+word2);
    if (col==31)
        vmx(CM, 20, ((c4 &0xffff)<< 16));
    else
        vmx(CM, 20,above | ((c4 &0xffffff)<< 8));

    if (c1==ESCAPE || fccontext==CURLYOPEN|| fccontext==HTLINK)
        vmx(CM+SKIPCM, 21, 0);
    else
        vmx(CM, 21, h1+word2*79+word3*71 );

    vmx(CM,22,((wtype&7)<< 10) + (w4&3)+fc*4+ (w4br<< 24));
    vmx(CM,22, (word0*3301+number0*3191 ));

    vmx(CM,23,word2+w4br+ 193 * (wtype & 0x7fff));
    vmx(CM,24,(w4br*256)+fc+(((wtype>>0)&0xFFF)<< 16));
    if (wshift ||c1==LF) {
        word3=word3*47,word2=word2*53, word1=word1*83;
    }
}

int bitupdate(int y, int c0, int bpos, int c4) {
    int j,c;
    int ismatch;
    apmfails=apmfails<<1;
    uasfails=uasfails<<1;
    j=vmx(ERR,bpos,0);
    apmfails=apmfails|j;
    uasfails=uasfails|(j&1);

    if (bpos== 0){
        uaslimit=uasfails;
        vmx(SCM, 0, c1);
        vmx(SCM, 1, c2*(fc1) );
        vmx(SCM, 2, (f & 0xffffff)>>16);
        vmx(SCM, 3, ttype & 0x3f );
        vmx(SCM, 4, w4 & 0xff );
        vmx(SCM, 5,  brcxt1 );
        vmx(SCM, 6, fc1 + 2 * ((wtype & 0x3f) ) );
        vmx(SCM, 7, fc);
    }

    ord=vmx(CM, 0,0);
    ord=ord+vmx(CM, 1,0);
    ord=ord+vmx(CM, 2,0);
    ord=ord+vmx(CM, 3,0);

    vmx(UAS,0,uaslimit);
    ismatch=matchMod( y, bpos);

    vmx(MX,0,ord << 3 | bpos);

    if (bpos==0) vmx(MX,1,(w4&63)*8+  (ttype&7) );
    else if (bpos > 3) {c=wrt_w[(c0<<(8-bpos))&255];
        vmx(MX,1,(((w4<<2)&63)+c)*8+w4br);
    } else
        vmx(MX,1,(w4&63)*8+  w4br );

    if (bpos) {
        c=c0<<(8-bpos); if (bpos==1)c=c+16 * (words*2& 4);
        if (bpos>3)  c = wrt_w[(c0<<(8-bpos))&255]*64 ;
        c=(min(bpos,5))*256+(ttype&63)+(c&192);
    }
    else c=(words&12)*16+(ttype&63);

    vmx(MX,2,c);
    vmx(MX,3,((2 * words) & 0xfc) + ord*256 + (w4 & 3));
    c= c0<<(8- bpos);
    vmx(MX,4,bpos*256+(((( words<< bpos)&255)>> bpos)|(c&255)));
    if (bpos>=1) {
        if (bpos==1) {
            c=c + 16 * (ttype & 7);}
        else if (bpos==2) {
            c=c + 16 * (w4&3);}
        else if (bpos==3) {
            c=c + 16 *(words & 1);}
        else  {
            c=bpos + (c&0xf0);
        }
        if (bpos < 4)
        c=bpos + (c&0xf0);
    } else c=16 * (w4&0xf);
    ord=ord-1;
    if (ord<0)
    ord=0;
    if (ismatch)
    ord=ord+1;

    vmx(MX,5, c + ord*256 + 8 * fc1);
    vmx(MX,6,((wtype) & 0x1f8)*4 + ((2 * words) & 0x1c) + (w4 & 3));
    vmx(MX,7,(ord*8 + (w4br?1:0)*4 + (w4&3)));
    vmx(APM2,0,(apmfails*8)*8+(wtype&3)*8+bpos);
}
void block(int a,int b) {
    info=a;
}

int main() {
    int i,x;
    // state tables
    vmi(STA,0, 28+(28<<16),31|(29<<16),23+(4<<16)+(17<<24),0);
    vmi(STA,1, 32+(28<<16),31|(28<<16),21+(5<<16)+(6<<24),0);
    vmi(STA,2, 29+(30<<16),28|(23<<16),29+(4<<16)+(22<<24),0);
    vmi(STA,3, 31+(27<<16),30|(27<<16),24+(4<<16)+(27<<24),0);
    vmi(STA,4, 33+(31<<16),31|(24<<16),20+(4<<16)+(33<<24),0);

    // match
    for (i=0;i<8;i++) vmi(ERR,i,e_l[i]+(e_h[i]<<16),0,0,0);
    vmi(UAS,0,13,0,5,0);
    vmi(SMC,0,64<<8,1023,0,0);
    for (i=0;i<8;i++)
    vmi(SCM,i,8,0,0,0);
    // 
    vmi(CM,0,16*4096+(5<<24),3+256*c_r[0]+c_s[0]*0x10000+0x1000000*c_s2[0],0,256*c_s3[0]+0x10000*c_s4[0]|(1<<28));
    vmi(CM,1,16*4096+(1<<24),1+256*c_r[1]+c_s[1]*0x10000+0x1000000*c_s2[1],0,256*c_s3[1]+0x10000*c_s4[1]|(1<<28));
    vmi(CM,2,16*4096+(1<<24),1+256*c_r[2]+c_s[2]*0x10000+0x1000000*c_s2[2],0,256*c_s3[2]+0x10000*c_s4[2]|(1<<28));
    vmi(CM,3,16*4096+(3<<24),1+256*c_r[3]+c_s[3]*0x10000+0x1000000*c_s2[3],0,256*c_s3[3]+0x10000*c_s4[3]|(1<<28));
    vmi(CM,4,16*4096+(1<<24),2+256*c_r[4]+c_s[4]*0x10000+0x1000000*c_s2[4],0,256*c_s3[4]+0x10000*c_s4[4]|(1<<28));
    vmi(CM,5,  8*4096+(3<<24),1+256*c_r[5]+c_s[5]*0x10000+0x1000000*c_s2[5],0,256*c_s3[5]+0x10000*c_s4[5]|(1<<28));
    vmi(CM,6,  1*4096+(1<<24),1+256*c_r[6]+c_s[6]*0x10000+0x1000000*c_s2[6],0,256*c_s3[6]+0x10000*c_s4[6]|(1<<28));
    vmi(CM,7,  2*4096+(5<<24),1+256*c_r[7]+c_s[7]*0x10000+0x1000000*c_s2[7],0,256*c_s3[7]+0x10000*c_s4[7]|(1<<28));
    vmi(CM,8,  1*4096+(4<<24),3+256*c_r[8]+c_s[8]*0x10000+0x1000000*c_s2[8],0,256*c_s3[8]+0x10000*c_s4[8]|(1<<28));
    vmi(CM,9,      32+(1<<24),2+256*c_r[9]+c_s[9]*0x10000+0x1000000*c_s2[9],0,256*c_s3[9]+0x10000*c_s4[9]|(1<<28));
    vmi(CM,10,     32+(2<<24),3+256*c_r[10]+c_s[10]*0x10000+0x1000000*c_s2[10],0,256*c_s3[10]+0x10000*c_s4[10]|(1<<28));
    vmi(CM,11,     32+(2<<24),4+256*c_r[11]+c_s[11]*0x10000+0x1000000*c_s2[11],0,256*c_s3[11]+0x10000*c_s4[11]|(1<<28));
    vmi(CM,12,     16+(2<<24),4+256*c_r[12]+c_s[12]*0x10000+0x1000000*c_s2[12],0,256*c_s3[12]+0x10000*c_s4[12]|(1<<28));
    vmi(CM,13,     32+(1<<24),7+256*c_r[13]+c_s[13]*0x10000+0x1000000*c_s2[13],0,256*c_s3[13]+0x10000*c_s4[13]|(1<<28));
    vmi(CM,14,   64*2+(1<<24),3+256*c_r[14]+c_s[14]*0x10000+0x1000000*c_s2[14],0,256*c_s3[14]+0x10000*c_s4[14]|(1<<28));
    vmi(CM,15,      2+(2<<24),2+256*c_r[15]+c_s[15]*0x10000+0x1000000*c_s2[15],0,256*c_s3[15]+0x10000*c_s4[15]|(1<<28));
    vmi(CM,16,    128+(1<<24),2+256*c_r[16]+c_s[16]*0x10000+0x1000000*c_s2[16],0,256*c_s3[16]+0x10000*c_s4[16]|(1<<28));
    vmi(CM,17, 4*4096+(1<<24),3+256*c_r[17]+c_s[17]*0x10000+0x1000000*c_s2[17],0,256*c_s3[17]+0x10000*c_s4[17]|(1<<28));
    vmi(CM,18, 4*4096+(5<<24),6+256*c_r[18]+c_s[18]*0x10000+0x1000000*c_s2[18],0,256*c_s3[18]+0x10000*c_s4[18]|(1<<28));
    vmi(CM,19, 4*4096+(5<<24),5+256*c_r[19]+c_s[19]*0x10000+0x1000000*c_s2[19],0,256*c_s3[19]+0x10000*c_s4[19]|(1<<28));
    vmi(CM,20,   4096+(1<<24),3+256*c_r[20]+c_s[20]*0x10000+0x1000000*c_s2[20],0,256*c_s3[20]+0x10000*c_s4[20]|(1<<28));
    vmi(CM,21,   4096+(3<<24),1+256*c_r[21]+c_s[21]*0x10000+0x1000000*c_s2[21],0,256*c_s3[21]+0x10000*c_s4[21]|(1<<28));
    vmi(CM,22,     32+(2<<24),2+256*c_r[22]+c_s[22]*0x10000+0x1000000*c_s2[22],0,256*c_s3[22]+0x10000*c_s4[22]|(1<<28));
    vmi(CM,23,   2048+(3<<24),1+256*c_r[23]+c_s[23]*0x10000+0x1000000*c_s2[23],0,256*c_s3[23]+0x10000*c_s4[23]|(1<<28));
    vmi(CM,24,   8*64+(1<<24),1+256*c_r[24]+c_s[24]*0x10000+0x1000000*c_s2[24],0,256*c_s3[24]+0x10000*c_s4[24]|(1<<28));
    vmi(CM,25,    512+(1<<24),1+256*c_r[25]+c_s[25]*0x10000+0x1000000*c_s2[25],0,256*c_s3[25]+0x10000*c_s4[25]|(1<<28));
    vmi(CM,26,    512+(1<<24),1+256*c_r[26]+c_s[26]*0x10000+0x1000000*c_s2[26],0,256*c_s3[26]+0x10000*c_s4[26]|(1<<28));

    vmi(MX,0,m_s[0]+256*m_e[0]+0x1000000*m_m[0],  64,0,0);
    vmi(MX,1,m_s[1]+256*m_e[1]+0x1000000*m_m[1],  512,0,0);
    vmi(MX,2,m_s[2]+256*m_e[2]+0x1000000*m_m[2], 1536,0,0);
    vmi(MX,3,m_s[3]+256*m_e[3]+0x1000000*m_m[3], 7*256,0,0);
    vmi(MX,4,m_s[4]+256*m_e[4]+0x1000000*m_m[4], 8*256,0,0);
    vmi(MX,5,m_s[5]+256*m_e[5]+0x1000000*m_m[5], 7*256,0,0);
    vmi(MX,6,m_s[6]+256*m_e[6]+0x1000000*m_m[6], 8*256,0,0);
    for (i=0;i<5+1+1+1;i++)   
    vmi(MM,i,0,i,1,0);
    vmi(MX,7,m_s[7]+256*m_e[7]+0x1000000*m_m[7], 8*7*2,1,0);

    vmi(APM2,0,0x800,24+40*256,8,0);
}