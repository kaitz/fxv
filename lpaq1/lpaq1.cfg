// Model based on lpaq1

enum {S=6,DHSBIT=0x100}; // S number of contexts
// N   last buffer index, n/2-1
// HN  last hash table index, n/8-1
enum {N=0xFFFFFFF,HN=0x3FFFFFF};
int ht[              0x4000000]={};
enum {MAXLEN=62};   // maximum match length, at most 62
int pos;      // number of bytes in buf
int match;    // pointer to current byte in matched context in buf
int len;      // length of match
int ha1, ha2; // context hashes
int order,c;
int cxt[8]={};
char buf[0x10000000]={};
int ord[63]={};
//parameters
//mixer
int m_p[3]={8, 0, 28};

void mm_p(int y, int bpos,int c0) {
    int i,b,cx;

    if (bpos==0) {
        ha1=(ha1*(3<<3)+c)&HN;
        ha2=(ha2*(5<<5)+c)&HN;

        // find or extend match
        if (len>0) {
            ++match;
            match=match&N;
            if (len<MAXLEN) ++len;
        } else {
            match=ht[ha1];
            if (match!=pos) {
                while (len<MAXLEN && (i=(match-len-1)&N)!=pos && buf[i]==buf[(pos-len-1)&N])
                ++len;
            }
        }
        if (len<2) {
            len=0;
            match=ht[ha2];
            if (match!=pos) {
                while (len<MAXLEN && (i=(match-len-1)&N)!=pos && buf[i]==buf[(pos-len-1)&N])
                ++len;
            }
        }
        // update index
        ht[ha1]=pos;
        ht[ha2]=pos;
    }

    // predict
    cx=c0;
    if (len>0 && ((buf[match]+256)>>(8-bpos))==c0) {
        b=(buf[match]>>(7-bpos))&1;  // next bit
        if (len<16) 
            cx=len*2+b;
        else
            cx=(len>>2)*2+b+24;
        cx=cx*256+buf[(pos-1)&N];
    } else
        len=0;
    vmx(SMC,0,cx);
}

int update(int y, int c0, int bpos, int c4) {
    int i,a,j;
    order=0;
    if (bpos== 0){ 
        c=c4&0xff;
        buf[pos]=c;
        pos++;
        pos=pos&N;
        cxt[0]=c<<8;                                // order 1
        cxt[1]=(((c4&0xffff)<<5)|0x57000000);       // order 2
        cxt[2]=((c4<<8)*3);                         // order 3
        cxt[3]=(c4*5);                              // order 4
        cxt[4]=((cxt[4]*(11<<5)+c*13)&0x3fffffff);  // order 6
        if (c>=65 && c<=90) c=c+32;                 // lowercase unigram word order
        if (c>=97 && c<=122) cxt[5]=(cxt[5]+c)*(7<<3);
        else cxt[5]=0;
        for (i=1; i<S; i++) {
            if (cxt[i]==0) cxt[i]=256;
            a=vmx(DHS,0,cxt[i]);
            if (i<5) order=order+a;
        }
    }else {
        if (bpos==4){
            for ( i=1; i<S; i++) {
                j=cxt[i]+c0;
                a=vmx(DHS,0,j);
                if (i<5) order=order+a;
            }
        }else {
            j=(y+1)<<(bpos&3)-1;
            for ( i=1; i<S; i++) {
                a=vmx(DHS+DHSBIT,0,j);
                if (i<5) order=order+a;
            }
        }
    }
    vmx(DS,0,cxt[0]+c0);
    mm_p(y,bpos, c0);
    order=order+ord[len];
    vmx(MX,0,order+10*(cxt[0]>>13));
    vmx(APM2,0,cxt[0]+c0); 
    vmx(APM2,1,bpos);
}

void block(int a,int b) {
}

int main() { 
    int i;
    // Paramteres were tuned on 25mb input:
    //   % Type
    //  45 binary
    //   5 jpeg
    //  15 executable (x86,arm,..)
    //  10 image (4,8 bit)
    //  25 text

    vmi(STA,0, 35+(63<<16),4|(5<<16),19+(11<<16)+(9<<24),0);
    vmi(STA,1, 39+(40<<16),9|(5<<16),3+(40<<16)+(62<<24),0);

    for (i=1; i<63; ++i) ord[i]=(i>=8)+(i>=12)+(i>=16)+(i>=32);

    vmi(DS,0,17+(2<<16),1023 ,1,0);        // order 1
    vmi(DHS,0,4+(1<<16),26+(3<<8),0,S-1);  // order 2+
    vmi(MM,0,0,0,0,0);                     // add DS to MX
    vmi(SMC,0,64<<8,1023,0,0);             // match
    vmi(MX,0,m_p[0] +256*m_p[1]+0x1000000*m_p[2],80,0,0);

    vmi(APM2,0,0x10000,24+6*256,1,0);
    vmi(LMX,0,1+(1+1)*256,2729,0,0);       // mix mx0 apm0
    vmi(APM2,1,0x800,24+40*256,1+1+1,0);
    vmi(LMX,1,1+1+(1+1+1+1)*256,2861,0,0); // mix apm0 apm1
}