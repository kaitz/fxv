// zpaq m0.cfg model
// https://encode.su/threads/1435-Byte-oriented-LZ77-compressor?p=27713&viewfull=1#post27713
// the model assumes input processed by lzpre20
// also https://www.mattmahoney.net/dc/lz1.zip
int a, b, c;
int d;
int h2(int h1, int val) {
    return (h1+512)*773+val;
}
int update(int y,int c0,int bpos,int c4) {
    if (bpos==0) {
        //(c=state: 0=init, 1=expect LZ77 literal or match code,
        //  2..4=expect n-1 offset bytes,
        //  5..68=expect n-4 literals
        b=c4&0xff; // input
        a=c;
        if (a==1) {  
            //expect code ccxxxxxx as input
            //cc is number of offset bytes following
            // 00xxxxxx means x+1 literal bytes follow
            a=(b>>6)&3;
            if (a>0) {
                c=a+1; //(high 2 bits is code length
                d=h2(0,b>>2);
            } else {
                c=(b&63)+5;// literal length
                d=h2(0,b);
            }
        } else {
            if (a==5) { // end of literal
                c=1;
                d=0;
            } else {
                if (a==0) { // init
                    c=5;
                    d=0;  // initial state will be 7+length of postprocessor
                }else {   // literal or offset
                    c=c-1;
                    // model literals in order 1 context, offset order 0
                    if (a>5) {
                        d=h2(0,b);
                    }
                }
            }
        }
        // model parse state as context
        a=c;
        if (a>5) {
            a=5;
        }
        d=h2(d,a);

        vmx(CM,0,d);
    }
}
void block(int a,int b) {}
int main() {
    vmi(CM,0,1024+(0<<24),1,0,0);
    vmi(MX,0,0,1,0,0);
}